<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HyperChat | Mensagens Instantâneas</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #3f37c9;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --success: #4cc9f0;
            --danger: #f72585;
            --warning: #f8961e;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f5f7fb;
            color: var(--dark);
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            overflow: hidden;
        }

        header {
            background-color: var(--primary);
            color: white;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            font-size: 1.25rem;
        }

        .logo i {
            font-size: 1.5rem;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: var(--light);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: var(--primary);
        }

        .chat-container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        .sidebar {
            width: 300px;
            border-right: 1px solid var(--light-gray);
            background-color: #f8fafc;
            display: flex;
            flex-direction: column;
        }

        .search-bar {
            padding: 1rem;
            border-bottom: 1px solid var(--light-gray);
        }

        .search-input {
            width: 100%;
            padding: 0.5rem 1rem;
            border: 1px solid var(--light-gray);
            border-radius: 20px;
            font-size: 0.9rem;
            outline: none;
            transition: border 0.2s;
        }

        .search-input:focus {
            border-color: var(--primary);
        }

        .contacts {
            flex: 1;
            overflow-y: auto;
        }

        .contact {
            padding: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .contact:hover {
            background-color: var(--light-gray);
        }

        .contact.active {
            background-color: #e6f0ff;
        }

        .contact-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: var(--primary);
        }

        .contact-info {
            flex: 1;
        }

        .contact-name {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }

        .contact-last-message {
            font-size: 0.8rem;
            color: var(--gray);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .messages-container {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background-color: #f5f7fb;
        }

        .message {
            max-width: 70%;
            margin-bottom: 1rem;
            padding: 0.75rem 1rem;
            border-radius: 1rem;
            position: relative;
            word-wrap: break-word;
        }

        .message.received {
            background-color: white;
            border-top-left-radius: 0;
            align-self: flex-start;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .message.sent {
            background-color: var(--primary);
            color: white;
            border-top-right-radius: 0;
            align-self: flex-end;
        }

        .message-info {
            display: flex;
            justify-content: space-between;
            margin-top: 0.5rem;
            font-size: 0.75rem;
        }

        .message.received .message-info {
            color: var(--gray);
        }

        .message.sent .message-info {
            color: rgba(255, 255, 255, 0.8);
        }

        .typing-indicator {
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
            color: var(--gray);
            font-style: italic;
        }

        .input-area {
            padding: 1rem;
            border-top: 1px solid var(--light-gray);
            background-color: white;
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .message-input {
            flex: 1;
            padding: 0.75rem 1rem;
            border: 1px solid var(--light-gray);
            border-radius: 24px;
            outline: none;
            transition: border 0.2s;
            font-size: 0.9rem;
        }

        .message-input:focus {
            border-color: var(--primary);
        }

        .file-input {
            display: none;
        }

        .btn {
            padding: 0.5rem;
            border: none;
            background: none;
            cursor: pointer;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray);
            transition: all 0.2s;
        }

        .btn:hover {
            background-color: var(--light-gray);
            color: var(--primary);
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .file-preview {
            padding: 0.5rem 1rem;
            background-color: var(--light-gray);
            border-radius: 8px;
            margin-bottom: 0.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .file-preview i {
            cursor: pointer;
            color: var(--gray);
        }

        .file-preview i:hover {
            color: var(--danger);
        }

        .status {
            font-size: 0.75rem;
            color: var(--gray);
            padding: 0.5rem 1rem;
            text-align: center;
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                display: none;
            }

            .sidebar.active {
                display: flex;
            }

            .chat-area {
                display: none;
            }

            .chat-area.active {
                display: flex;
            }

            .btn-menu {
                display: block;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <header>
            <div class="logo">
                <i class="fas fa-bolt"></i>
                <span>HyperChat</span>
            </div>
            <div class="user-info">
                <div class="user-avatar" id="userAvatar">U</div>
                <span id="username">Usuário</span>
            </div>
        </header>

        <div class="chat-container">
            <div class="sidebar">
                <div class="search-bar">
                    <input type="text" class="search-input" placeholder="Pesquisar conversas...">
                </div>
                <div class="contacts">
                    <!-- Contatos serão adicionados dinamicamente -->
                </div>
            </div>

            <div class="chat-area">
                <div class="messages-container" id="messages">
                    <!-- Mensagens serão adicionadas dinamicamente -->
                    <div class="status" id="connectionStatus">Conectando ao servidor...</div>
                </div>

                <div class="input-area">
                    <label for="fileInput" class="btn">
                        <i class="fas fa-paperclip"></i>
                    </label>
                    <input type="file" id="fileInput" class="file-input">
                    
                    <input type="text" class="message-input" id="messageInput" placeholder="Digite sua mensagem..." autocomplete="off">
                    
                    <button class="btn btn-primary" onclick="sendMessage()">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="app.js"></script>
    <script>
        // Obter nome de usuário e atualizar a interface
        const username = prompt("Digite seu nome de usuário:") || "Usuário";
        document.getElementById('username').textContent = username;
        document.getElementById('userAvatar').textContent = username.charAt(0).toUpperCase();

        // Configurar WebSocket
        const ws = new WebSocket("ws://127.0.0.1:8000/ws/" + username);
        const input = document.getElementById('messageInput');
        const messagesContainer = document.getElementById('messages');
        const statusElement = document.getElementById('connectionStatus');

        // Eventos do WebSocket
        ws.onopen = function() {
            statusElement.textContent = "Online";
            statusElement.style.color = "var(--success)";
        };

        ws.onclose = function() {
            statusElement.textContent = "Offline - Tentando reconectar...";
            statusElement.style.color = "var(--danger)";
        };

        ws.onerror = function(error) {
            statusElement.textContent = "Erro na conexão";
            statusElement.style.color = "var(--danger)";
            console.error("WebSocket error:", error);
        };

        // Evento de digitação
        let typingTimeout;
        input.addEventListener('input', () => {
            ws.send("/typing");
            
            // Limpar timeout anterior
            if (typingTimeout) clearTimeout(typingTimeout);
            
            // Configurar novo timeout
            typingTimeout = setTimeout(() => {
                ws.send("/stop-typing");
            }, 2000);
        });

        // Evento de recebimento de mensagem
        ws.onmessage = function (event) {
            const data = event.data;
            
            // Verificar se é um indicador de digitação
            if (data.startsWith("/typing:")) {
                const typingUser = data.split(':')[1];
                showTypingIndicator(typingUser);
                return;
            }
            
            // Verificar se é para parar o indicador de digitação
            if (data.startsWith("/stop-typing:")) {
                const typingUser = data.split(':')[1];
                hideTypingIndicator(typingUser);
                return;
            }
            
            // Criar elemento de mensagem
            const message = document.createElement('div');
            message.classList.add('message');
            
            // Verificar se é uma mensagem do usuário atual
            if (data.startsWith(username + ":")) {
                message.classList.add('sent');
                message.textContent = data.split(':')[1];
            } else {
                message.classList.add('received');
                message.textContent = data;
            }
            
            // Adicionar informações da mensagem
            const messageInfo = document.createElement('div');
            messageInfo.classList.add('message-info');
            
            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            const sender = data.split(':')[0];
            
            messageInfo.innerHTML = `
                <span>${sender}</span>
                <span>${time}</span>
            `;
            
            message.appendChild(messageInfo);
            messagesContainer.appendChild(message);
            
            // Rolagem automática para a última mensagem
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        };

        // Função para enviar mensagem
        function sendMessage() {
            const input = document.getElementById("messageInput");
            const message = input.value.trim();
            
            if (message) {
                ws.send(message);
                input.value = "";
            }
        }

        // Função para enviar arquivo
        async function uploadFile() {
            const input = document.getElementById('fileInput');
            const file = input.files[0];
            
            if (!file) return;
            
            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('http://127.0.0.1:8000/upload/', {
                    method: 'POST',
                    body: formData,
                });

                const result = await response.json();
                
                // Adicionar mensagem com o arquivo enviado
                const message = document.createElement('div');
                message.classList.add('message', 'sent');
                message.innerHTML = `
                    <div>Arquivo enviado: ${file.name}</div>
                    <div class="message-info">
                        <span>${username}</span>
                        <span>${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                    </div>
                `;
                
                messagesContainer.appendChild(message);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
            } catch (error) {
                console.error("Erro ao enviar arquivo:", error);
                alert("Erro ao enviar arquivo");
            }
        }

        // Funções para indicador de digitação
        function showTypingIndicator(user) {
            let indicator = document.getElementById('typing-indicator');
            
            if (!indicator) {
                indicator = document.createElement('div');
                indicator.id = 'typing-indicator';
                indicator.classList.add('typing-indicator');
                messagesContainer.appendChild(indicator);
            }
            
            indicator.textContent = `${user} está digitando...`;
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function hideTypingIndicator(user) {
            const indicator = document.getElementById('typing-indicator');
            if (indicator) {
                indicator.remove();
            }
        }

        // Permitir enviar mensagem com Enter
        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Configurar evento para upload de arquivo
        document.getElementById('fileInput').addEventListener('change', uploadFile);
    </script>
</body>
</html>